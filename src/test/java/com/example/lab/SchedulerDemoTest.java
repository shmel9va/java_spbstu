package com.example.lab;

import com.example.lab.model.Task;
import com.example.lab.repository.TaskRepository;
import com.example.lab.service.SchedulerService;
import com.example.lab.service.TaskService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.test.context.ActiveProfiles;

import java.time.LocalDateTime;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
@ActiveProfiles("dev")
public class SchedulerDemoTest {

    @Autowired
    private SchedulerService schedulerService;

    @Autowired
    private TaskService taskService;

    @Autowired
    private TaskRepository taskRepository;

    @MockBean
    private KafkaTemplate<String, Object> kafkaTemplate;

    @Test
    void demonstrateSchedulerFunctionality() {
        // 1. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        Task overdueTask = new Task();
        overdueTask.setUserId("demo-user");
        overdueTask.setTitle("–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞");
        overdueTask.setDescription("–≠—Ç–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞");
        overdueTask.setTargetDate(LocalDateTime.now().minusDays(1)); // –í—á–µ—Ä–∞
        overdueTask.setCompleted(false);
        overdueTask.setDeleted(false);

        // 2. –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –∑–∞–¥–∞—á—É
        Task normalTask = new Task();
        normalTask.setUserId("demo-user");
        normalTask.setTitle("–û–±—ã—á–Ω–∞—è –∑–∞–¥–∞—á–∞");
        normalTask.setDescription("–≠—Ç–∞ –∑–∞–¥–∞—á–∞ –Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞");
        normalTask.setTargetDate(LocalDateTime.now().plusDays(1)); // –ó–∞–≤—Ç—Ä–∞
        normalTask.setCompleted(false);
        normalTask.setDeleted(false);

        // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏
        taskRepository.save(overdueTask);
        taskRepository.save(normalTask);

        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞
        List<Task> overdueTasks = taskService.getOverdueTasks(LocalDateTime.now());
        assertEquals(1, overdueTasks.size());
        assertEquals("–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞", overdueTasks.get(0).getTitle());

        // 5. –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        schedulerService.processOverdueTasksAsync();

        // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç
        schedulerService.checkOverdueTasks();

        System.out.println("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
        System.out.println("üìã –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: " + overdueTasks.size());
        System.out.println("üìù –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏: " + overdueTasks.get(0).getTitle());
    }

    @Test
    void demonstrateAsyncProcessing() {
        // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        for (int i = 1; i <= 3; i++) {
            Task task = new Task();
            task.setUserId("user-" + i);
            task.setTitle("–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ " + i);
            task.setDescription("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ " + i);
            task.setTargetDate(LocalDateTime.now().minusHours(i));
            task.setCompleted(false);
            task.setDeleted(false);
            taskRepository.save(task);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞–π–¥–µ–Ω—ã
        List<Task> overdueTasks = taskService.getOverdueTasks(LocalDateTime.now());
        assertEquals(3, overdueTasks.size());

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        schedulerService.processOverdueTasksAsync();

        System.out.println("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ " + overdueTasks.size() + " –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    }
} 